{"ast":null,"code":"import*as React from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import ToggleButtonGroup from\"./ToggleButtonGroup\";import ToggleButton from\"./ToggleButton\";var ToggleButtonRow=function ToggleButtonRow(_ref){var value=_ref.value,onValueChange=_ref.onValueChange,children=_ref.children,style=_ref.style;var count=React.Children.count(children);return React.createElement(ToggleButtonGroup,{value:value,onValueChange:onValueChange},React.createElement(View,{style:[styles.row,style]},React.Children.map(children,function(child,i){if(child&&child.type===ToggleButton){return React.cloneElement(child,{style:[styles.button,i===0?styles.first:i===count-1?styles.last:styles.middle,child.props.style]});}return child;})));};ToggleButtonRow.displayName='ToggleButton.Row';var styles=StyleSheet.create({row:{flexDirection:'row'},button:{borderWidth:StyleSheet.hairlineWidth},first:{borderTopRightRadius:0,borderBottomRightRadius:0},middle:{borderRadius:0,borderLeftWidth:0},last:{borderLeftWidth:0,borderTopLeftRadius:0,borderBottomLeftRadius:0}});export default ToggleButtonRow;export{ToggleButtonRow};","map":{"version":3,"names":["React","StyleSheet","View","ToggleButtonGroup","ToggleButton","ToggleButtonRow","_ref","value","onValueChange","children","style","count","Children","createElement","styles","row","map","child","i","type","cloneElement","button","first","last","middle","props","displayName","create","flexDirection","borderWidth","hairlineWidth","borderTopRightRadius","borderBottomRightRadius","borderRadius","borderLeftWidth","borderTopLeftRadius","borderBottomLeftRadius"],"sources":["/Users/ahadanwar/Desktop/tmdb/node_modules/react-native-paper/lib/module/components/ToggleButton/ToggleButtonRow.tsx"],"sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View, StyleProp, ViewStyle } from 'react-native';\nimport ToggleButtonGroup from './ToggleButtonGroup';\nimport ToggleButton from './ToggleButton';\n\ntype Props = {\n  /**\n   * Function to execute on selection change.\n   */\n  onValueChange: (value: string) => void;\n  /**\n   * Value of the currently selected toggle button.\n   */\n  value: string;\n  /**\n   * React elements containing toggle buttons.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * Toggle button row renders a group of toggle buttons in a row.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/toggle-button-row.gif\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ToggleButton } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('left');\n *\n *   return (\n *     <ToggleButton.Row onValueChange={value => setValue(value)} value={value}>\n *       <ToggleButton icon=\"format-align-left\" value=\"left\" />\n *       <ToggleButton icon=\"format-align-right\" value=\"right\" />\n *     </ToggleButton.Row>\n *   );\n * };\n *\n * export default MyComponent;\n *\n *```\n */\nconst ToggleButtonRow = ({ value, onValueChange, children, style }: Props) => {\n  const count = React.Children.count(children);\n\n  return (\n    <ToggleButtonGroup value={value} onValueChange={onValueChange}>\n      <View style={[styles.row, style]}>\n        {React.Children.map(children, (child, i) => {\n          // @ts-expect-error: TypeScript complains about child.type but it doesn't matter\n          if (child && child.type === ToggleButton) {\n            // @ts-expect-error: We're sure that child is a React Element\n            return React.cloneElement(child, {\n              style: [\n                styles.button,\n                i === 0\n                  ? styles.first\n                  : i === count - 1\n                  ? styles.last\n                  : styles.middle,\n                // @ts-expect-error: We're sure that child is a React Element\n                child.props.style,\n              ],\n            });\n          }\n\n          return child;\n        })}\n      </View>\n    </ToggleButtonGroup>\n  );\n};\n\nToggleButtonRow.displayName = 'ToggleButton.Row';\n\nconst styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row',\n  },\n  button: {\n    borderWidth: StyleSheet.hairlineWidth,\n  },\n\n  first: {\n    borderTopRightRadius: 0,\n    borderBottomRightRadius: 0,\n  },\n\n  middle: {\n    borderRadius: 0,\n    borderLeftWidth: 0,\n  },\n\n  last: {\n    borderLeftWidth: 0,\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0,\n  },\n});\n\nexport default ToggleButtonRow;\n\n// @component-docs ignore-next-line\nexport { ToggleButtonRow };\n"],"mappings":"AAAA,MAAO,GAAK,CAAAA,KAAZ,KAAuB,OAAvB,QAAAC,UAAA,uDAAAC,IAAA,0CAEA,MAAO,CAAAC,iBAAP,2BACA,MAAO,CAAAC,YAAP,sBA+CA,GAAM,CAAAC,eAAe,CAAG,QAAlB,CAAAA,eAAeA,CAAAC,IAAA,CAAyD,IAAnD,CAAAC,KAAF,CAAAD,IAAA,CAAEC,KAAF,CAASC,aAAT,CAAAF,IAAA,CAASE,aAAT,CAAwBC,QAAxB,CAAAH,IAAA,CAAwBG,QAAxB,CAAkCC,KAAA,CAAAJ,IAAA,CAAAI,KAAA,CACzD,GAAM,CAAAC,KAAK,CAAGX,KAAK,CAACY,QAAN,CAAeD,KAAf,CAAqBF,QAArB,CAAd,CAEA,MACE,CAAAT,KAAA,CAAAa,aAAA,CAACV,iBAAD,EAAmBI,KAAK,CAAEA,KAA1B,CAAiCC,aAAa,CAAEA,aAAhD,EACER,KAAA,CAAAa,aAAA,CAACX,IAAD,EAAMQ,KAAK,CAAE,CAACI,MAAM,CAACC,GAAR,CAAaL,KAAb,CAAb,EACGV,KAAK,CAACY,QAAN,CAAeI,GAAf,CAAmBP,QAAnB,CAA6B,SAACQ,KAAD,CAAQC,CAAR,CAAc,CAE1C,GAAID,KAAK,EAAIA,KAAK,CAACE,IAAN,GAAef,YAA5B,CAA0C,CAExC,MAAO,CAAAJ,KAAK,CAACoB,YAAN,CAAmBH,KAAnB,CAA0B,CAC/BP,KAAK,CAAE,CACLI,MAAM,CAACO,MADF,CAELH,CAAC,GAAK,CAAN,CACIJ,MAAM,CAACQ,KADX,CAEIJ,CAAC,GAAKP,KAAK,CAAG,CAAd,CACAG,MAAM,CAACS,IADP,CAEAT,MAAM,CAACU,MANN,CAQLP,KAAK,CAACQ,KAAN,CAAYf,KARP,CADwB,CAA1B,CAAP,CAYD,CAED,MAAO,CAAAO,KAAP,CACD,CAnBA,CADH,CADF,CADF,CA0BD,CA7BD,CA+BAZ,eAAe,CAACqB,WAAhB,CAA8B,kBAA9B,CAEA,GAAM,CAAAZ,MAAM,CAAGb,UAAU,CAAC0B,MAAX,CAAkB,CAC/BZ,GAAG,CAAE,CACHa,aAAa,CAAE,KADZ,CAD0B,CAI/BP,MAAM,CAAE,CACNQ,WAAW,CAAE5B,UAAU,CAAC6B,aADlB,CAJuB,CAQ/BR,KAAK,CAAE,CACLS,oBAAoB,CAAE,CADjB,CAELC,uBAAuB,CAAE,CAFpB,CARwB,CAa/BR,MAAM,CAAE,CACNS,YAAY,CAAE,CADR,CAENC,eAAe,CAAE,CAFX,CAbuB,CAkB/BX,IAAI,CAAE,CACJW,eAAe,CAAE,CADb,CAEJC,mBAAmB,CAAE,CAFjB,CAGJC,sBAAsB,CAAE,CAHpB,CAlByB,CAAlB,CAAf,CAyBA,cAAe,CAAA/B,eAAf,CAGA,OAASA,eAAT"},"metadata":{},"sourceType":"module","externalDependencies":[]}