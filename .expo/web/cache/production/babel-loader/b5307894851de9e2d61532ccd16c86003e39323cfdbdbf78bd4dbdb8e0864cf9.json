{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"icon\",\"size\",\"theme\",\"accessibilityLabel\",\"disabled\",\"style\",\"value\",\"status\",\"onPress\"];function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import*as React from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import{withTheme}from\"../../core/theming\";import color from'color';import IconButton from\"../IconButton\";import{ToggleButtonGroupContext}from\"./ToggleButtonGroup\";import{black,white}from\"../../styles/colors\";var ToggleButton=function ToggleButton(_ref){var icon=_ref.icon,size=_ref.size,theme=_ref.theme,accessibilityLabel=_ref.accessibilityLabel,disabled=_ref.disabled,style=_ref.style,value=_ref.value,status=_ref.status,_onPress=_ref.onPress,rest=_objectWithoutProperties(_ref,_excluded);var borderRadius=theme.roundness;return React.createElement(ToggleButtonGroupContext.Consumer,null,function(context){var backgroundColor;var checked=context&&context.value===value||status==='checked';if(checked){backgroundColor=theme.dark?'rgba(255, 255, 255, .12)':'rgba(0, 0, 0, .08)';}else{backgroundColor='transparent';}return React.createElement(IconButton,_extends({borderless:false,icon:icon,onPress:function onPress(e){if(_onPress){_onPress(e);}if(context){context.onValueChange(!checked?value:null);}},size:size,accessibilityLabel:accessibilityLabel,accessibilityState:{disabled:disabled,selected:checked},disabled:disabled,style:[styles.content,{backgroundColor:backgroundColor,borderRadius:borderRadius,borderColor:color(theme.dark?white:black).alpha(0.29).rgb().string()},style]},rest));});};var styles=StyleSheet.create({content:{width:42,height:42,margin:0}});export default withTheme(ToggleButton);var ToggleButtonWithTheme=withTheme(ToggleButton);export{ToggleButtonWithTheme as ToggleButton};","map":{"version":3,"names":["React","StyleSheet","withTheme","color","IconButton","ToggleButtonGroupContext","black","white","ToggleButton","_ref","icon","size","theme","accessibilityLabel","disabled","style","value","status","onPress","rest","_objectWithoutProperties","_excluded","borderRadius","roundness","createElement","Consumer","context","backgroundColor","checked","dark","_extends","borderless","e","onValueChange","accessibilityState","selected","styles","content","borderColor","alpha","rgb","string","create","width","height","margin","ToggleButtonWithTheme"],"sources":["/Users/ahadanwar/Desktop/tmdb/node_modules/react-native-paper/lib/module/components/ToggleButton/ToggleButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  GestureResponderEvent,\n} from 'react-native';\nimport { withTheme } from '../../core/theming';\nimport color from 'color';\nimport IconButton from '../IconButton';\nimport { ToggleButtonGroupContext } from './ToggleButtonGroup';\nimport { black, white } from '../../styles/colors';\nimport type { IconSource } from '../Icon';\n\ntype Props = {\n  /**\n   * Icon to display for the `ToggleButton`.\n   */\n  icon: IconSource;\n  /**\n   * Size of the icon.\n   */\n  size?: number;\n  /**\n   * Custom text color for button.\n   */\n  color?: string;\n  /**\n   * Whether the button is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the `ToggleButton`. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (value?: GestureResponderEvent | string) => void;\n  /**\n   * Value of button.\n   */\n  value?: string;\n  /**\n   * Status of button.\n   */\n  status?: 'checked' | 'unchecked';\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Toggle buttons can be used to group related options. To emphasize groups of related toggle buttons,\n * a group should share a common container.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/toggle-button.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ToggleButton } from 'react-native-paper';\n *\n * const ToggleButtonExample = () => {\n *   const [status, setStatus] = React.useState('checked');\n *\n *   const onButtonToggle = value => {\n *     setStatus(status === 'checked' ? 'unchecked' : 'checked');\n *   };\n *\n *   return (\n *     <ToggleButton\n *       icon=\"bluetooth\"\n *       value=\"bluetooth\"\n *       status={status}\n *       onPress={onButtonToggle}\n *     />\n *   );\n * };\n *\n * export default ToggleButtonExample;\n *\n * ```\n */\nconst ToggleButton = ({\n  icon,\n  size,\n  theme,\n  accessibilityLabel,\n  disabled,\n  style,\n  value,\n  status,\n  onPress,\n  ...rest\n}: Props) => {\n  const borderRadius = theme.roundness;\n\n  return (\n    <ToggleButtonGroupContext.Consumer>\n      {(context: { value: string | null; onValueChange: Function } | null) => {\n        let backgroundColor;\n\n        const checked: boolean | null =\n          (context && context.value === value) || status === 'checked';\n\n        if (checked) {\n          backgroundColor = theme.dark\n            ? 'rgba(255, 255, 255, .12)'\n            : 'rgba(0, 0, 0, .08)';\n        } else {\n          backgroundColor = 'transparent';\n        }\n\n        return (\n          <IconButton\n            borderless={false}\n            icon={icon}\n            onPress={(e?: GestureResponderEvent | string) => {\n              if (onPress) {\n                onPress(e);\n              }\n\n              if (context) {\n                context.onValueChange(!checked ? value : null);\n              }\n            }}\n            size={size}\n            accessibilityLabel={accessibilityLabel}\n            accessibilityState={{ disabled, selected: checked }}\n            disabled={disabled}\n            style={[\n              styles.content,\n              {\n                backgroundColor,\n                borderRadius,\n                borderColor: color(theme.dark ? white : black)\n                  .alpha(0.29)\n                  .rgb()\n                  .string(),\n              },\n              style,\n            ]}\n            {...rest}\n          />\n        );\n      }}\n    </ToggleButtonGroupContext.Consumer>\n  );\n};\n\nconst styles = StyleSheet.create({\n  content: {\n    width: 42,\n    height: 42,\n    margin: 0,\n  },\n});\n\nexport default withTheme(ToggleButton);\n\n// @component-docs ignore-next-line\nconst ToggleButtonWithTheme = withTheme(ToggleButton);\n// @component-docs ignore-next-line\nexport { ToggleButtonWithTheme as ToggleButton };\n"],"mappings":"qdAAA,MAAO,GAAK,CAAAA,KAAZ,KAAuB,OAAvB,QAAAC,UAAA,gDAOA,OAASC,SAAT,0BACA,MAAO,CAAAC,KAAP,KAAkB,OAAlB,CACA,MAAO,CAAAC,UAAP,qBACA,OAASC,wBAAT,2BACA,OAASC,KAAT,CAAgBC,KAAhB,2BA6EA,GAAM,CAAAC,YAAY,CAAG,QAAf,CAAAA,YAAYA,CAAAC,IAAA,CAWL,IAVX,CAAAC,IADoB,CAAAD,IAAA,CACpBC,IADoB,CAEpBC,IAFoB,CAAAF,IAAA,CAEpBE,IAFoB,CAGpBC,KAHoB,CAAAH,IAAA,CAGpBG,KAHoB,CAIpBC,kBAJoB,CAAAJ,IAAA,CAIpBI,kBAJoB,CAKpBC,QALoB,CAAAL,IAAA,CAKpBK,QALoB,CAMpBC,KANoB,CAAAN,IAAA,CAMpBM,KANoB,CAOpBC,KAPoB,CAAAP,IAAA,CAOpBO,KAPoB,CAQpBC,MARoB,CAAAR,IAAA,CAQpBQ,MARoB,CASpBC,QAToB,CAAAT,IAAA,CASpBS,OAToB,CAUjBC,IAAA,CAAAC,wBAAA,CAAAX,IAAA,CAAAY,SAAA,EAEH,GAAM,CAAAC,YAAY,CAAGV,KAAK,CAACW,SAA3B,CAEA,MACE,CAAAvB,KAAA,CAAAwB,aAAA,CAACnB,wBAAD,CAA0BoB,QAA1B,MACI,SAAAC,OAAD,CAAuE,CACtE,GAAI,CAAAC,eAAJ,CAEA,GAAM,CAAAC,OAAuB,CAC1BF,OAAO,EAAIA,OAAO,CAACV,KAAR,GAAkBA,KAA9B,EAAwCC,MAAM,GAAK,SADrD,CAGA,GAAIW,OAAJ,CAAa,CACXD,eAAe,CAAGf,KAAK,CAACiB,IAAN,CACd,0BADc,CAEd,oBAFJ,CAGD,CAJD,IAIO,CACLF,eAAe,CAAG,aAAlB,CACD,CAED,MACE,CAAA3B,KAAA,CAAAwB,aAAA,CAACpB,UAAD,CAAA0B,QAAA,EACEC,UAAU,CAAE,KADd,CAEErB,IAAI,CAAEA,IAFR,CAGEQ,OAAO,CAAG,SAAAA,QAAAc,CAAD,CAAwC,CAC/C,GAAId,QAAJ,CAAa,CACXA,QAAO,CAACc,CAAD,CAAP,CACD,CAED,GAAIN,OAAJ,CAAa,CACXA,OAAO,CAACO,aAAR,CAAsB,CAACL,OAAD,CAAWZ,KAAX,CAAmB,IAAzC,EACD,CACF,CAXH,CAYEL,IAAI,CAAEA,IAZR,CAaEE,kBAAkB,CAAEA,kBAbtB,CAcEqB,kBAAkB,CAAE,CAAEpB,QAAF,CAAEA,QAAF,CAAYqB,QAAQ,CAAEP,OAAtB,CAdtB,CAeEd,QAAQ,CAAEA,QAfZ,CAgBEC,KAAK,CAAE,CACLqB,MAAM,CAACC,OADF,CAEL,CACEV,eADF,CACEA,eADF,CAEEL,YAFF,CAEEA,YAFF,CAGEgB,WAAW,CAAEnC,KAAK,CAACS,KAAK,CAACiB,IAAN,CAAatB,KAAb,CAAqBD,KAAtB,CAAL,CACViC,KADU,CACJ,IADI,EAEVC,GAFU,GAGVC,MAHU,EAHf,CAFK,CAUL1B,KAVK,CAhBT,EA4BMI,IA5BN,EADF,CAgCD,CA/CH,CADF,CAmDD,CAjED,CAmEA,GAAM,CAAAiB,MAAM,CAAGnC,UAAU,CAACyC,MAAX,CAAkB,CAC/BL,OAAO,CAAE,CACPM,KAAK,CAAE,EADA,CAEPC,MAAM,CAAE,EAFD,CAGPC,MAAM,CAAE,CAHD,CADsB,CAAlB,CAAf,CAQA,cAAe,CAAA3C,SAAS,CAACM,YAAD,CAAxB,CAGA,GAAM,CAAAsC,qBAAqB,CAAG5C,SAAS,CAACM,YAAD,CAAvC,CAEA,OAASsC,qBAAqB,GAAI,CAAAtC,YAAlC"},"metadata":{},"sourceType":"module","externalDependencies":[]}