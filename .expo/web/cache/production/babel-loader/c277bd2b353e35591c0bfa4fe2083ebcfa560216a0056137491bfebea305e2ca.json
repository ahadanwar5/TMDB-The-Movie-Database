{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"icon\",\"color\",\"size\",\"accessibilityLabel\",\"disabled\",\"onPress\",\"animated\",\"theme\",\"style\"];function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import*as React from'react';import View from\"react-native-web/dist/exports/View\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import color from'color';import TouchableRipple from\"./TouchableRipple/TouchableRipple\";import Icon from\"./Icon\";import CrossFadeIcon from\"./CrossFadeIcon\";import{withTheme}from\"../core/theming\";var IconButton=function IconButton(_ref){var icon=_ref.icon,customColor=_ref.color,_ref$size=_ref.size,size=_ref$size===void 0?24:_ref$size,accessibilityLabel=_ref.accessibilityLabel,disabled=_ref.disabled,onPress=_ref.onPress,_ref$animated=_ref.animated,animated=_ref$animated===void 0?false:_ref$animated,theme=_ref.theme,style=_ref.style,rest=_objectWithoutProperties(_ref,_excluded);var iconColor=typeof customColor!=='undefined'?customColor:theme.colors.text;var rippleColor=color(iconColor).alpha(0.32).rgb().string();var IconComponent=animated?CrossFadeIcon:Icon;var buttonSize=size*1.5;return React.createElement(TouchableRipple,_extends({borderless:true,centered:true,onPress:onPress,rippleColor:rippleColor,style:[styles.container,{width:buttonSize,height:buttonSize,borderRadius:buttonSize/2},disabled&&styles.disabled,style],accessibilityLabel:accessibilityLabel,accessibilityTraits:disabled?['button','disabled']:'button',accessibilityComponentType:\"button\",accessibilityRole:\"button\",accessibilityState:{disabled:disabled},disabled:disabled,hitSlop:TouchableRipple.supported?{top:10,left:10,bottom:10,right:10}:{top:6,left:6,bottom:6,right:6}},rest),React.createElement(View,null,React.createElement(IconComponent,{color:iconColor,source:icon,size:size})));};var styles=StyleSheet.create({container:{alignItems:'center',justifyContent:'center',overflow:'hidden',margin:6},disabled:{opacity:0.32}});export default withTheme(IconButton);","map":{"version":3,"names":["React","View","StyleSheet","color","TouchableRipple","Icon","CrossFadeIcon","withTheme","IconButton","_ref","icon","customColor","_ref$size","size","accessibilityLabel","disabled","onPress","_ref$animated","animated","theme","style","rest","_objectWithoutProperties","_excluded","iconColor","colors","text","rippleColor","alpha","rgb","string","IconComponent","buttonSize","createElement","_extends","borderless","centered","styles","container","width","height","borderRadius","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityState","hitSlop","supported","top","left","bottom","right","source","create","alignItems","justifyContent","overflow","margin","opacity"],"sources":["/Users/ahadanwar/Desktop/tmdb/node_modules/react-native-paper/lib/module/components/IconButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  GestureResponderEvent,\n  TouchableWithoutFeedback,\n} from 'react-native';\nimport color from 'color';\n\nimport TouchableRipple from './TouchableRipple/TouchableRipple';\nimport Icon, { IconSource } from './Icon';\nimport CrossFadeIcon from './CrossFadeIcon';\nimport { withTheme } from '../core/theming';\n\nimport type { $RemoveChildren } from '../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Icon to display.\n   */\n  icon: IconSource;\n  /**\n   * Color of the icon.\n   */\n  color?: string;\n  /**\n   * Size of the icon.\n   */\n  size?: number;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Whether an icon change is animated.\n   */\n  animated?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  style?: StyleProp<ViewStyle>;\n  ref?: React.RefObject<TouchableWithoutFeedback>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * An icon button is a button which displays only an icon without a label.\n * By default button has 150% size of the icon.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/icon-button-1.png\" />\n *     <figcaption>Icon button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/icon-button-2.png\" />\n *     <figcaption>Pressed icon button</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { IconButton, Colors } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <IconButton\n *     icon=\"camera\"\n *     color={Colors.red500}\n *     size={20}\n *     onPress={() => console.log('Pressed')}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n *\n * @extends TouchableRipple props https://callstack.github.io/react-native-paper/touchable-ripple.html\n */\nconst IconButton = ({\n  icon,\n  color: customColor,\n  size = 24,\n  accessibilityLabel,\n  disabled,\n  onPress,\n  animated = false,\n  theme,\n  style,\n  ...rest\n}: Props) => {\n  const iconColor =\n    typeof customColor !== 'undefined' ? customColor : theme.colors.text;\n  const rippleColor = color(iconColor).alpha(0.32).rgb().string();\n  const IconComponent = animated ? CrossFadeIcon : Icon;\n  const buttonSize = size * 1.5;\n  return (\n    <TouchableRipple\n      borderless\n      centered\n      onPress={onPress}\n      rippleColor={rippleColor}\n      style={[\n        styles.container,\n        { width: buttonSize, height: buttonSize, borderRadius: buttonSize / 2 },\n        disabled && styles.disabled,\n        style,\n      ]}\n      accessibilityLabel={accessibilityLabel}\n      // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n      accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n      accessibilityComponentType=\"button\"\n      accessibilityRole=\"button\"\n      accessibilityState={{ disabled }}\n      disabled={disabled}\n      hitSlop={\n        TouchableRipple.supported\n          ? { top: 10, left: 10, bottom: 10, right: 10 }\n          : { top: 6, left: 6, bottom: 6, right: 6 }\n      }\n      {...rest}\n    >\n      <View>\n        <IconComponent color={iconColor} source={icon} size={size} />\n      </View>\n    </TouchableRipple>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    overflow: 'hidden',\n    margin: 6,\n  },\n  disabled: {\n    opacity: 0.32,\n  },\n});\n\nexport default withTheme(IconButton);\n"],"mappings":"udAAA,MAAO,GAAK,CAAAA,KAAZ,KAAuB,OAAvB,QAAAC,IAAA,iDAAAC,UAAA,gDASA,MAAO,CAAAC,KAAP,KAAkB,OAAlB,CAEA,MAAO,CAAAC,eAAP,yCACA,MAAO,CAAAC,IAAP,cACA,MAAO,CAAAC,aAAP,uBACA,OAASC,SAAT,uBA2EA,GAAM,CAAAC,UAAU,CAAG,QAAb,CAAAA,UAAUA,CAAAC,IAAA,CAWH,IAVX,CAAAC,IADkB,CAAAD,IAAA,CAClBC,IADkB,CAEXC,WAFW,CAAAF,IAAA,CAElBN,KAAK,CAAAS,SAAA,CAAAH,IAAA,CACLI,IAAI,CAAJA,IAAI,CAAAD,SAAA,UAAG,EAHW,CAAAA,SAAA,CAIlBE,kBAJkB,CAAAL,IAAA,CAIlBK,kBAJkB,CAKlBC,QALkB,CAAAN,IAAA,CAKlBM,QALkB,CAMlBC,OANkB,CAAAP,IAAA,CAMlBO,OANkB,CAAAC,aAAA,CAAAR,IAAA,CAOlBS,QAAQ,CAARA,QAAQ,CAAAD,aAAA,UAAG,KAPO,CAAAA,aAAA,CAQlBE,KARkB,CAAAV,IAAA,CAQlBU,KARkB,CASlBC,KATkB,CAAAX,IAAA,CASlBW,KATkB,CAUfC,IAAA,CAAAC,wBAAA,CAAAb,IAAA,CAAAc,SAAA,EAEH,GAAM,CAAAC,SAAS,CACb,MAAO,CAAAb,WAAP,GAAuB,WAAvB,CAAqCA,WAArC,CAAmDQ,KAAK,CAACM,MAAN,CAAaC,IADlE,CAEA,GAAM,CAAAC,WAAW,CAAGxB,KAAK,CAACqB,SAAD,CAAL,CAAiBI,KAAjB,CAAuB,IAAvB,EAA6BC,GAA7B,GAAmCC,MAAnC,EAApB,CACA,GAAM,CAAAC,aAAa,CAAGb,QAAQ,CAAGZ,aAAH,CAAmBD,IAAjD,CACA,GAAM,CAAA2B,UAAU,CAAGnB,IAAI,CAAG,GAA1B,CACA,MACE,CAAAb,KAAA,CAAAiC,aAAA,CAAC7B,eAAD,CAAA8B,QAAA,EACEC,UAAU,KADZ,CAEEC,QAAQ,KAFV,CAGEpB,OAAO,CAAEA,OAHX,CAIEW,WAAW,CAAEA,WAJf,CAKEP,KAAK,CAAE,CACLiB,MAAM,CAACC,SADF,CAEL,CAAEC,KAAK,CAAEP,UAAT,CAAqBQ,MAAM,CAAER,UAA7B,CAAyCS,YAAY,CAAET,UAAU,CAAG,CAApE,CAFK,CAGLjB,QAAQ,EAAIsB,MAAM,CAACtB,QAHd,CAILK,KAJK,CALT,CAWEN,kBAAkB,CAAEA,kBAXtB,CAaE4B,mBAAmB,CAAE3B,QAAQ,CAAG,CAAC,QAAD,CAAW,UAAX,CAAH,CAA4B,QAb3D,CAcE4B,0BAA0B,CAAC,QAd7B,CAeEC,iBAAiB,CAAC,QAfpB,CAgBEC,kBAAkB,CAAE,CAAE9B,QAAA,CAAAA,QAAF,CAhBtB,CAiBEA,QAAQ,CAAEA,QAjBZ,CAkBE+B,OAAO,CACL1C,eAAe,CAAC2C,SAAhB,CACI,CAAEC,GAAG,CAAE,EAAP,CAAWC,IAAI,CAAE,EAAjB,CAAqBC,MAAM,CAAE,EAA7B,CAAiCC,KAAK,CAAE,EAAxC,CADJ,CAEI,CAAEH,GAAG,CAAE,CAAP,CAAUC,IAAI,CAAE,CAAhB,CAAmBC,MAAM,CAAE,CAA3B,CAA8BC,KAAK,CAAE,CAArC,CArBR,EAuBM9B,IAvBN,EAyBErB,KAAA,CAAAiC,aAAA,CAAChC,IAAD,MACED,KAAA,CAAAiC,aAAA,CAACF,aAAD,EAAe5B,KAAK,CAAEqB,SAAtB,CAAiC4B,MAAM,CAAE1C,IAAzC,CAA+CG,IAAI,CAAEA,IAArD,EADF,CAzBF,CADF,CA+BD,CAhDD,CAkDA,GAAM,CAAAwB,MAAM,CAAGnC,UAAU,CAACmD,MAAX,CAAkB,CAC/Bf,SAAS,CAAE,CACTgB,UAAU,CAAE,QADH,CAETC,cAAc,CAAE,QAFP,CAGTC,QAAQ,CAAE,QAHD,CAITC,MAAM,CAAE,CAJC,CADoB,CAO/B1C,QAAQ,CAAE,CACR2C,OAAO,CAAE,IADD,CAPqB,CAAlB,CAAf,CAYA,cAAe,CAAAnD,SAAS,CAACC,UAAD,CAAxB"},"metadata":{},"sourceType":"module","externalDependencies":[]}