{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import*as React from'react';export var ListAccordionGroupContext=React.createContext(null);var ListAccordionGroup=function ListAccordionGroup(_ref){var expandedIdProp=_ref.expandedId,onAccordionPress=_ref.onAccordionPress,children=_ref.children;var _React$useState=React.useState(undefined),_React$useState2=_slicedToArray(_React$useState,2),expandedId=_React$useState2[0],setExpandedId=_React$useState2[1];var onAccordionPressDefault=function onAccordionPressDefault(newExpandedId){setExpandedId(function(currentExpandedId){return currentExpandedId===newExpandedId?undefined:newExpandedId;});};return React.createElement(ListAccordionGroupContext.Provider,{value:{expandedId:expandedIdProp||expandedId,onAccordionPress:onAccordionPress||onAccordionPressDefault}},children);};ListAccordionGroup.displayName='List.AccordionGroup';export default ListAccordionGroup;","map":{"version":3,"names":["React","ListAccordionGroupContext","createContext","ListAccordionGroup","_ref","expandedIdProp","expandedId","onAccordionPress","children","_React$useState","useState","undefined","_React$useState2","_slicedToArray","setExpandedId","onAccordionPressDefault","newExpandedId","currentExpandedId","createElement","Provider","value","displayName"],"sources":["/Users/ahadanwar/Desktop/tmdb/node_modules/react-native-paper/lib/module/components/List/ListAccordionGroup.tsx"],"sourcesContent":["import * as React from 'react';\n\ntype Props = {\n  /**\n   * Function to execute on selection change.\n   */\n  onAccordionPress?: (expandedId: string | number) => void;\n  /**\n   * Id of the currently expanded list accordion\n   */\n  expandedId?: string | number;\n  /**\n   * React elements containing list accordions\n   */\n  children: React.ReactNode;\n};\n\nexport type ListAccordionGroupContextType = {\n  expandedId: string | number | undefined;\n  onAccordionPress: (expandedId: string | number) => void;\n} | null;\n\nexport const ListAccordionGroupContext = React.createContext<\n  ListAccordionGroupContextType\n>(null);\n\n/**\n * List.AccordionGroup allows to control a group of List Accordions. `id` prop for List.Accordion is required in order for group to work.\n * List.AccordionGroup can be a controlled or uncontrolled component. The example shows the uncontrolled version.\n * At most one Accordion can be expanded at a given time.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-accordion-group.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View, Text } from 'react-native';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <List.AccordionGroup>\n *     <List.Accordion title=\"Accordion 1\" id=\"1\">\n *       <List.Item title=\"Item 1\" />\n *     </List.Accordion>\n *     <List.Accordion title=\"Accordion 2\" id=\"2\">\n *       <List.Item title=\"Item 2\" />\n *     </List.Accordion>\n *     <View>\n *       <Text>\n *         List.Accordion can be wrapped because implementation uses React.Context.\n *       </Text>\n *       <List.Accordion title=\"Accordion 3\" id=\"3\">\n *         <List.Item title=\"Item 3\" />\n *       </List.Accordion>\n *     </View>\n *   </List.AccordionGroup>\n * );\n *\n * export default MyComponent;\n *```\n */\nconst ListAccordionGroup = ({\n  expandedId: expandedIdProp,\n  onAccordionPress,\n  children,\n}: Props) => {\n  const [expandedId, setExpandedId] = React.useState<\n    string | number | undefined\n  >(undefined);\n\n  const onAccordionPressDefault = (newExpandedId: string | number) => {\n    setExpandedId((currentExpandedId) =>\n      currentExpandedId === newExpandedId ? undefined : newExpandedId\n    );\n  };\n\n  return (\n    <ListAccordionGroupContext.Provider\n      value={{\n        expandedId: expandedIdProp || expandedId, // component can be controlled or uncontrolled\n        onAccordionPress: onAccordionPress || onAccordionPressDefault,\n      }}\n    >\n      {children}\n    </ListAccordionGroupContext.Provider>\n  );\n};\n\nListAccordionGroup.displayName = 'List.AccordionGroup';\n\nexport default ListAccordionGroup;\n"],"mappings":"iEAAA,MAAO,GAAK,CAAAA,KAAZ,KAAuB,OAAvB,CAsBA,MAAO,IAAM,CAAAC,yBAAyB,CAAGD,KAAK,CAACE,aAAN,CAEvC,IAFuC,CAAlC,CAyCP,GAAM,CAAAC,kBAAkB,CAAG,QAArB,CAAAA,kBAAkBA,CAAAC,IAAA,CAIX,IAHC,CAAAC,cADc,CAAAD,IAAA,CAC1BE,UAAU,CACVC,gBAF0B,CAAAH,IAAA,CAE1BG,gBAF0B,CAG1BC,QAAA,CAAAJ,IAAA,CAAAI,QAAA,CAEA,IAAAC,eAAA,CAAoCT,KAAK,CAACU,QAAN,CAElCC,SAFkC,CAApC,CAAAC,gBAAA,CAAAC,cAAA,CAAAJ,eAAA,IAAOH,UAAD,CAAAM,gBAAA,IAAaE,aAAb,CAAAF,gBAAA,IAIN,GAAM,CAAAG,uBAAuB,CAAI,QAA3B,CAAAA,uBAAuBA,CAAIC,aAAD,CAAoC,CAClEF,aAAa,CAAE,SAAAG,iBAAD,QACZ,CAAAA,iBAAiB,GAAKD,aAAtB,CAAsCL,SAAtC,CAAkDK,aADvC,GAAb,CAGD,CAJD,CAMA,MACE,CAAAhB,KAAA,CAAAkB,aAAA,CAACjB,yBAAD,CAA2BkB,QAA3B,EACEC,KAAK,CAAE,CACLd,UAAU,CAAED,cAAc,EAAIC,UADzB,CAELC,gBAAgB,CAAEA,gBAAgB,EAAIQ,uBAFjC,CADT,EAMGP,QANH,CADF,CAUD,CAzBD,CA2BAL,kBAAkB,CAACkB,WAAnB,CAAiC,qBAAjC,CAEA,cAAe,CAAAlB,kBAAf"},"metadata":{},"sourceType":"module","externalDependencies":[]}