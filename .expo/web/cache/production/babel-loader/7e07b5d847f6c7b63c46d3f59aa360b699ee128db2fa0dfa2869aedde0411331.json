{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"disabled\",\"onPress\",\"theme\",\"status\",\"value\",\"testID\"];function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import*as React from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import color from'color';import{RadioButtonContext}from\"./RadioButtonGroup\";import{handlePress,isChecked}from\"./utils\";import MaterialCommunityIcon from\"../MaterialCommunityIcon\";import TouchableRipple from\"../TouchableRipple/TouchableRipple\";import{withTheme}from\"../../core/theming\";var RadioButtonIOS=function RadioButtonIOS(_ref){var disabled=_ref.disabled,onPress=_ref.onPress,theme=_ref.theme,status=_ref.status,value=_ref.value,testID=_ref.testID,rest=_objectWithoutProperties(_ref,_excluded);var checkedColor=disabled?theme.colors.disabled:rest.color||theme.colors.accent;var rippleColor;if(disabled){rippleColor=color(theme.colors.text).alpha(0.16).rgb().string();}else{rippleColor=color(checkedColor).fade(0.32).rgb().string();}return React.createElement(RadioButtonContext.Consumer,null,function(context){var checked=isChecked({contextValue:context===null||context===void 0?void 0:context.value,status:status,value:value})==='checked';return React.createElement(TouchableRipple,_extends({},rest,{borderless:true,rippleColor:rippleColor,onPress:disabled?undefined:function(){handlePress({onPress:onPress,value:value,onValueChange:context===null||context===void 0?void 0:context.onValueChange});},accessibilityTraits:disabled?['button','disabled']:'button',accessibilityComponentType:checked?'radiobutton_checked':'radiobutton_unchecked',accessibilityRole:\"radio\",accessibilityState:{disabled:disabled,checked:checked},accessibilityLiveRegion:\"polite\",style:styles.container,testID:testID}),React.createElement(View,{style:{opacity:checked?1:0}},React.createElement(MaterialCommunityIcon,{allowFontScaling:false,name:\"check\",size:24,color:checkedColor,direction:\"ltr\"})));});};RadioButtonIOS.displayName='RadioButton.IOS';var styles=StyleSheet.create({container:{borderRadius:18,padding:6}});export default withTheme(RadioButtonIOS);var RadioButtonIOSWithTheme=withTheme(RadioButtonIOS);export{RadioButtonIOSWithTheme as RadioButtonIOS};","map":{"version":3,"names":["React","StyleSheet","View","color","RadioButtonContext","handlePress","isChecked","MaterialCommunityIcon","TouchableRipple","withTheme","RadioButtonIOS","_ref","disabled","onPress","theme","status","value","testID","rest","_objectWithoutProperties","_excluded","checkedColor","colors","accent","rippleColor","text","alpha","rgb","string","fade","createElement","Consumer","context","checked","contextValue","_extends","borderless","undefined","onValueChange","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityState","accessibilityLiveRegion","style","styles","container","opacity","allowFontScaling","name","size","direction","displayName","create","borderRadius","padding","RadioButtonIOSWithTheme"],"sources":["/Users/ahadanwar/Desktop/tmdb/node_modules/react-native-paper/lib/module/components/RadioButton/RadioButtonIOS.tsx"],"sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport color from 'color';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress, isChecked } from './utils';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Value of the radio button\n   */\n  value: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for iOS, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.ios.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.ios.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nconst RadioButtonIOS = ({\n  disabled,\n  onPress,\n  theme,\n  status,\n  value,\n  testID,\n  ...rest\n}: Props) => {\n  const checkedColor = disabled\n    ? theme.colors.disabled\n    : rest.color || theme.colors.accent;\n\n  let rippleColor: string;\n\n  if (disabled) {\n    rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n  } else {\n    rippleColor = color(checkedColor).fade(0.32).rgb().string();\n  }\n\n  return (\n    <RadioButtonContext.Consumer>\n      {(context?: RadioButtonContextType) => {\n        const checked =\n          isChecked({\n            contextValue: context?.value,\n            status,\n            value,\n          }) === 'checked';\n\n        return (\n          <TouchableRipple\n            {...rest}\n            borderless\n            rippleColor={rippleColor}\n            onPress={\n              disabled\n                ? undefined\n                : () => {\n                    handlePress({\n                      onPress,\n                      value,\n                      onValueChange: context?.onValueChange,\n                    });\n                  }\n            }\n            // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n            accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n            accessibilityComponentType={\n              checked ? 'radiobutton_checked' : 'radiobutton_unchecked'\n            }\n            accessibilityRole=\"radio\"\n            accessibilityState={{ disabled, checked }}\n            accessibilityLiveRegion=\"polite\"\n            style={styles.container}\n            testID={testID}\n          >\n            <View style={{ opacity: checked ? 1 : 0 }}>\n              <MaterialCommunityIcon\n                allowFontScaling={false}\n                name=\"check\"\n                size={24}\n                color={checkedColor}\n                direction=\"ltr\"\n              />\n            </View>\n          </TouchableRipple>\n        );\n      }}\n    </RadioButtonContext.Consumer>\n  );\n};\n\nRadioButtonIOS.displayName = 'RadioButton.IOS';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6,\n  },\n});\n\nexport default withTheme(RadioButtonIOS);\n\n// @component-docs ignore-next-line\nconst RadioButtonIOSWithTheme = withTheme(RadioButtonIOS);\n// @component-docs ignore-next-line\nexport { RadioButtonIOSWithTheme as RadioButtonIOS };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}